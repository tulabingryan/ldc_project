# --- FOR THE GRID SERVER AND HOME SERVER USING RASPBERRYPI 3 ---
# Enable wifi connection by copying 'ssh' and 'wpa_supplicant.conf 
# from the folder 'pi_wifi_connection' to boot drive of raspi
# reboot raspi

# Copy the folder "ldc_project" to /home/pi/
scp -r ldc_project pi@192.168.1.2:/home/pi/  # where 192.168.1.2 is the ip address of the pi
# enter the password for the user pi:
raspberry
# wait until all files are sent to the raspberry pi

# Install berryconda3
ssh pi@192.168.1.2
raspberry # password of the user pi
cd /home/pi/ldc_project/required_packages/
sudo chmod +x Berryconda3-2.0.0-Linux-armv7l.sh # make the file executable
./Berryconda3-2.0.0-Linux-armv7l.sh  # run the installer
export PATH=/home/pi/berryconda3/bin:$PATH  # add berryconda to path
# close terminal

# open a new terminal and check if berryconda has been installed
conda --version # should display the conda version, otherwise reinstall berryconda3

# install other dependencies
yes | conda install numpy scipy pandas
pip install geocoder
pip install -r requirements.txt


# edit the launcher.sh
cd /home/pi/ldc_project/
sudo nano launcher.sh
# the file should contain the following lines
python /home/pi/ldc_project/grid_server/src/update_ldc_db.py&   # runs the script that queries home and dongle status
python /home/pi/ldc_project/grid_server/src/manage.py runserver 192.168.1.2:15000& # runs the grid server
# alternatively for home server:
python /home/pi/ldc_project/home_server/src/manage.py runserver 192.168.1.3:16000& # runs the grid server

# make the program launcher executable 
cd /home/pi/ldc_project/
sudo chmod 755 launcher.sh

# Enable autorun of the launcher.sh during boot 
sudo crontab -e # choose nano as editor
# write the following line to the end of the crontab
@reboot sh /home/pi/ldc_project/launcher.sh >/home/pi/ldc_project/logs/cronlog 2>&1
# create the logs directory where errors will be written if autorun fails
cd /home/pi/ldc_project/
mkdir logs

# reboot raspi
sudo reboot

# check if the program successfully run during boot
ssh pi@192.168.1.2
raspberry
htop # opens a program displaying all processes running within the raspi
# there should be a program running manage.py

# If autorun failed, check the logs
cd /home/pi/ldc_project/logs
sudo nano cronlog

# -------------------------------
# For pifacedigital for raspi3
# Install pifacedigitalio
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install python3-pifacedigitalio
# to install piface in berryconda
pip install pifacedigitalio
pip install pifacecommon

# enable SPI
sudo nano /boot/config.txt
# add the following line at the bottom
dtparam=spi=on
# save and reboot and check if SPI is enabled
lsmod | grep spi_
# should display "spi_bcm2708" or "spi_bcm2835"

# edit spi.py
find / -name spi.py  # this will find all files with name "spi.py"
# edit spi.py at the berryconda3 module
sudo nano /home/pi/berryconda3/lib/python3.6/site-packages/pifacecommon/spi.py
# find the following lines and add "speed_hz=ctypes.c_uint32(100000)" so it will look like 
# create the spi transfer struct
        transfer = spi_ioc_transfer(
            tx_buf=ctypes.addressof(wbuffer),
            rx_buf=ctypes.addressof(rbuffer),
            len=ctypes.sizeof(wbuffer),
            speed_hz=ctypes.c_uint32(100000) 
        )
# save, exit and reboot... the raspi3 should now be able to detect the piface board 
# test the LEDS and pinout, note: LEDS and output pins are connected in parallel
# hence, turning on the the output pin will turn ON the corresponding LED
python
import pifacedigitalio
pifacedigital = pifacedigitalio.PiFaceDigital()
pifacedigital.output_pins[4].turn_on() # will turn ON output 4 and LED4


#---to run the server ---
gunicorn grid_server:server -b :15003  # note: install gunicorn by 'pip install gunicorn'


#--use vnc server
ssh pi@192.168.2.100
sudo raspi-config --- change interface options and enable vnc
vncserver  --- this will run the vnc server
--- open vncviewer in your pc
---connect to 192.168.2.100:1
---user: pi, password:ldc
---virtual desktop will open
---open a terminal in the virtual desktop
vnclicensewiz
---use license using email:tulabingryan@gmail.com, password:MyvncApril17
---add this pi to the team


# to clone sd_card
# insert sd_card to be cloned
sudo fdisk -l  # list the available memory blocks and partitions
# choose the block pertaining to the sd_card, e.g., usually mmcblk0
sudo unmount /dev/mmcblock0  # unmount the block, manually unmount if not possible to do in terminal
# copy sd_card to local disk
sudo dd if=/dev/mmcblk0 bs=32M | pv -s 2G | sudo dd of=sd_card_back.dd bs=32M
# unplug sd_card
# insert new sd_card to put the cloned image
sudo fdisk -l  # see the name of the new sd_card
sudo umount /dev/mmcblk0 # unmount the sd_card 
sudo dd if=sd_card_back.dd bs=32M | pv -s 2G | sudo dd of=/dev/mmcblk0 bs=32M

